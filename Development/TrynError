#include "cyhal.h"
#include "cybsp.h"
#include "cy_retarget_io.h"
#include "data_acquisition.h"

#define RX_BUF_SIZE     4
#define TX_BUF_SIZE     4
/*******************************************************************************
* Function Name: handle_error
********************************************************************************
* Summary:
* User defined error handling function.
*
* Parameters:
*  void
*
* Return:
*  void
*
*******************************************************************************/
void handle_error(void)
{
     /* Disable all interrupts. */
    __disable_irq();

    CY_ASSERT(0);
}

/*******************************************************************************
* Function Name: main
********************************************************************************
* Summary:
* This is the main function.
* Reads one byte from the serial terminal and echoes back the read byte.
*
* Parameters:
*  void
*
* Return:
*  int
*
*******************************************************************************/
/*******************************************************************************
 * Function Name: data_acquisition_task
 *******************************************************************************
 * Summary:
 *  Task used to retrieve data from qrcode and rfid.
 *
 * Parameters:
 *  void *args : Task parameter defined during task creation (unused).
 *
 * Return:
 *  void
 *
 *******************************************************************************/

uint8_t data_acquisition_task(void *arg)
{
    cyhal_uart_t uart_obj;
    uint32_t     actualbaud;
    uint8_t      rx_buf[RX_BUF_SIZE];

    // Initialize the UART configuration structure
    const cyhal_uart_cfg_t uart_config =
    {
        .data_bits      = 8,
        .stop_bits      = 1,
        .parity         = CYHAL_UART_PARITY_NONE,
        .rx_buffer      = rx_buf,
        .rx_buffer_size = RX_BUF_SIZE
    };

    cy_rslt_t result;
    #if defined(CY_DEVICE_SECURE)
        cyhal_wdt_t wdt_obj;
        /* Clear watchdog timer so that it doesn't trigger a reset */
        result = cyhal_wdt_init(&wdt_obj, cyhal_wdt_get_max_timeout_ms());
        CY_ASSERT(CY_RSLT_SUCCESS == result);
        cyhal_wdt_free(&wdt_obj);
    #endif

    uint8_t read_data; /* Variable to store the received character
                        * through terminal */

    /* Initialize the device and board peripherals */
    result = cybsp_init();
    if (result != CY_RSLT_SUCCESS)
    {
        handle_error();
    }

    /* Initialize retarget-io to use the debug UART port */

/*
    result = cy_retarget_io_init_fc(CYBSP_DEBUG_UART_TX,
                                    CYBSP_DEBUG_UART_RX,
                                    CYBSP_DEBUG_UART_CTS,
                                    CYBSP_DEBUG_UART_RTS,
                                    CY_RETARGET_IO_BAUDRATE);
*/
    // Initialize the UART Block
    result = cyhal_uart_init(&uart_obj, P9_1, P9_0, NC, NC, NULL,
                           &uart_config);

    if (result != CY_RSLT_SUCCESS)
    {
        handle_error();
    }

    // Set the baud rate
    result = cyhal_uart_set_baud(&uart_obj, 115200, &actualbaud);


    /* \x1b[2J\x1b[;H - ANSI ESC sequence for clear screen */
//    printf("\x1b[2J\x1b[;H");

    printf("***********************************************************\r\n");
    printf("HAL: UART Transmit and Receive\r\n");
    printf("***********************************************************\r\n\n");
    printf(">> Start typing to see the echo on the screen \r\n\n");


    __enable_irq();
    uint8_t data_barcode[13];
    int i=0;
    for (;;)
    {
        if (CY_RSLT_SUCCESS == cyhal_uart_getc(&uart_obj,
                                               &read_data, 0))
        {
        	data_barcode[i]=read_data;
        	i++;
        	if (i == 12)
        	{
        		i = 0;
        	}
            if (CY_RSLT_SUCCESS != cyhal_uart_putc(&uart_obj,
                                                   read_data))
            {
                handle_error();
            }
        }
        else
        {
            handle_error();
        }
    }
    return (uint8_t)data_barcode;
}

/* [] END OF FILE */
